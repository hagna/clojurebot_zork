(ns bot1.core
  ;; In an (ns ..) form, you typically use keywords. These are flags
  ;; telling ns what to do, which is why it is different from the REPL
  ;; and outside of an ns form. These are flags that call the
  ;; functions/macros for you.
  (:require hobbit.bitly)
  (:use [clojure.java.io :only (as-file copy)])
  ;; You can have multiple imports (and requires too).
  (:import (hobbit.bitly Bitly)
           (org.jibble.pircbot PircBot)
           (java.io ByteArrayOutputStream StringWriter)
           (java.nio.charset Charset)
           ))

(def ^:dynamic *bot*)

(def url-regex #"[A-Za-z]+://[^  ^/]+\.[^  ^/]+[^ ]+")

(def random (java.util.Random.))
;define characters list to use to generate string
(def nchars 
   (map char (concat (range 48 58) (range 66 92) (range 97 123))))
;generates 1 random character
(defn random-char [] 
  (nth nchars (.nextInt random (count nchars))))
; generates random string of length characters
(defn random-string [length]
  (apply str (take length (repeatedly random-char))))

;; Clojure doesn't use camelCase for names. Use hypens to separate words
;; in names.
(defn send-msg "send a message to a recv, a recv is a channel name or a nick"
  [this recv msg]
  (.sendMessage this recv (.replace (str msg) \newline \ )))

(def *bitly* (hobbit.bitly/Bitly. "R_3e31226c1421a34e074cc8f4367ec33c" "hagna" "j.mp"))

(defn rick "generates a nice rick roll that seems different every time"
  []
  (let [roll "http://www.youtube.com/watch?v=XZ5TajZYW6Y"]
    (hobbit.core/shorten *bitly* (str roll "/#" (random-string 5)))))

(defn is-priv-url [url]
  (or (.startsWith url "http://10")
      (.startsWith url "https://10")
      (.startsWith url "https://web0.sec")
      (.startsWith url "http://web0.sec")))

(defn handle-text [channel sender message]
  (println channel sender message))


(defn handle-url [channel sender url]
  (println channel sender url)
  (if (is-priv-url url)
    (println "not shortening private url" url)
    (let [s-url (hobbit.core/shorten *bitly* url) saved (- (count url) (count s-url))]
      (println "shorter url is" s-url)
      (if (> saved 3)
        (let [msg (str s-url)]
          (send-msg *bot* channel msg))
        (println "didn't save enough by shortening url" url)))))

(defn fuse [n msg]
  (future ((Thread/sleep n) (msg))))

(def desalpha { "i:" 10400 "eI" 10429 "aI" 10434})

(defn handle-priv-message [sender login hostname message]
  (if (= sender "matt")
    (send-msg *bot* "#dev" message)))

(defn handle-message [channel sender login hostname message]
  (println channel sender login hostname message)
  (let [url (re-find url-regex message)]
   (if (= url nil)
     (handle-text channel sender message)
     (if (or (= channel "#dev") (= channel "#test"))
       (handle-url channel sender url))
     )))

(defn pircbot []
  (proxy [PircBot] []
    (onMessage [channel sender login hostname message]
      (handle-message channel sender login hostname message)
      )
    (onPrivateMessage [sender login hostname message]
      (handle-priv-message sender login hostname message)
      )))

(defn- ^"[Ljava.lang.String;" as-env-strings 
  "Helper so that callers can pass a Clojure map for the :env to sh."
  [arg]
  (cond
   (nil? arg) nil
   (map? arg) (into-array String (map (fn [[k v]] (str (name k) "=" v)) arg))
   true arg))


(def ^:dynamic *sh-dir* nil)
(def ^:dynamic *sh-env* nil)

(defn parse-args
  [args]
  (let [default-encoding "UTF-8" ;; see sh doc string
        default-opts {:out-enc default-encoding :in-enc default-encoding :dir *sh-dir* :env *sh-env*}
        [cmd opts] (split-with string? args)]
    [cmd (merge default-opts (apply hash-map opts))]))


(defn- stream-to-bytes
  [in]
  (with-open [bout (ByteArrayOutputStream.)]
    (copy in bout)
    (.toByteArray bout)))


(defn- stream-to-string
  ([in] (stream-to-string in (.name (Charset/defaultCharset))))
  ([in enc]
     (with-open [bout (StringWriter.)]
       (copy in bout :encoding enc)
       (.toString bout))))


(defn- stream-to-enc
  [stream enc]
  (if (= enc :bytes)
    (stream-to-bytes stream)
    (stream-to-string stream enc)))




(defn sh
  "Passes the given strings to Runtime.exec() to launch a sub-process.

  Options are

  :in      may be given followed by any legal input source for
           clojure.java.io/copy, e.g. InputStream, Reader, File, byte[],
           or String, to be fed to the sub-process's stdin.
  :in-enc  option may be given followed by a String, used as a character
           encoding name (for example \"UTF-8\" or \"ISO-8859-1\") to
           convert the input string specified by the :in option to the
           sub-process's stdin.  Defaults to UTF-8.
           If the :in option provides a byte array, then the bytes are passed
           unencoded, and this option is ignored.
  :out-enc option may be given followed by :bytes or a String. If a
           String is given, it will be used as a character encoding
           name (for example \"UTF-8\" or \"ISO-8859-1\") to convert
           the sub-process's stdout to a String which is returned.
           If :bytes is given, the sub-process's stdout will be stored
           in a byte array and returned.  Defaults to UTF-8.
  :env     override the process env with a map (or the underlying Java
           String[] if you are a masochist).
  :dir     override the process dir with a String or java.io.File.

  You can bind :env or :dir for multiple operations using with-sh-env
  and with-sh-dir.

  sh returns a map of
    :exit => sub-process's exit code
    :out  => sub-process's stdout (as byte[] or String)
    :err  => sub-process's stderr (String via platform default encoding)"
  {:added "1.2"}
  [& args]
  (let [[cmd opts] (parse-args args)
        proc (.exec (Runtime/getRuntime) 
               ^"[Ljava.lang.String;" (into-array cmd)
               (as-env-strings (:env opts))
               (as-file (:dir opts)))
        {:keys [in in-enc out-enc]} opts]
    (if in
      (future
        (with-open [os (.getOutputStream proc)]
          (copy in os :encoding in-enc)))
      (.close (.getOutputStream proc)))
    (with-open [stdout (.getInputStream proc)
                stderr (.getErrorStream proc)]
      (let [out (future (stream-to-enc stdout out-enc))
            err (future (stream-to-string stderr))
            exit-proc proc]
        {:proc exit-proc :out @out :err @err}))))

    
(defn -main [& args]
  (println "args are" args)
  (def *bot* (pircbot))
  (.setName *bot* "FooBot")
  (.changeNick *bot* "skeletor")
  (.connect *bot* "10.1.2.209")
  (.joinChannel *bot* "#test"))
